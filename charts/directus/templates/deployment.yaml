apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "directus.fullname" . }}
  labels:
    {{- include "directus.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "directus.selectorLabels" . | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "directus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "directus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- include "directus.render" ( dict "value" .Values.initContainers "context" $ ) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            {{- range $val := .Values.attachExistingSecrets }}
            - secretRef:
                name: {{ $val }}
            {{- end }}
            - configMapRef:
                name: {{ include "directus.fullname" . }}-configmap
          env:
            {{- if eq .Values.databaseEngine "mysql" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.auth.existingSecret }}
                  key: mysql-password
            {{- else if eq .Values.databaseEngine "postgresql" }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: password
            {{- end }}
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.applicationSecretName }}
                  key: ADMIN_PASSWORD
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.applicationSecretName }}
                  key: SECRET
            - name: KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.applicationSecretName }}
                  key: KEY
            {{- if .Values.ingress.enabled }}
            - name: PUBLIC_URL
              value: http{{ if .Values.ingress.enableTLS }}s{{ end }}://{{(index .Values.ingress.hosts 0).host }}{{(index (index .Values.ingress.hosts 0).paths 0).path }}
            {{- end }}
            {{- if .Values.redis.enabled}}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{- if .Values.redis.auth.existingSecret}} {{ .Values.redis.auth.existingSecret }} {{- else }} {{ .Release.Name }}-redis {{- end }}
                  key: {{- if .Values.redis.auth.existingSecretPasswordKey }} {{ .Values.redis.auth.existingSecretPasswordKey }} {{- else }} redis-password {{- end }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- tpl (toYaml .Values.extraEnvVars) $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8055
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml (omit .Values.livenessProbe "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml (omit .Values.readinessProbe "enabled") | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            {{- toYaml (omit .Values.startupProbe "enabled") | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
        {{- if .Values.sidecars }}
        {{- include "directus.render" ( dict "value" .Values.sidecars "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.sidecar.enabled }}
        - name: {{ .Chart.Name }}-sidecar
          image: "{{ .Values.sidecar.repository }}:{{ .Values.sidecar.tag }}"
          imagePullPolicy: {{ .Values.sidecar.pullPolicy }}
          {{- with .Values.sidecar.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.sidecar.securityContext | nindent 12 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
